How to Build Your League of Legends Counterpick App Using Next.js (App Router)

1. Set up the Project
Use npx create-next-app@latest to make a new Next.js project.

Call your project something like lol-counterpick.

Choose the "App Router" option (not Pages Router) — so you have an app/ folder, not pages/.

Choose TypeScript if you want stronger typing, but you can also use JavaScript if you prefer.

2. Organize the Files
Inside your project:

Make a folder called /components/ — this will store your form, and your results UI.

Make a folder called /data/ — this will store your champion matchup database and item builds database (probably just simple .ts or .js files).

3. Create Static Data
You’ll first hardcode some simple matchup data:

For example: "If enemy is Darius, good counterpicks are Quinn, Teemo, Vayne."

Also hardcode item builds for champions — like "Quinn usually builds Kraken Slayer, Collector, Lord Dominik’s Regards."

Both are simple lookup tables — a JSON-like structure.

4. Build the Input Form
In your main page (like page.tsx):

Create a form that asks the user:

(Optional) Their own champion (if they have one)

The enemy champion (this is required)

The lane (Top, Jungle, Mid, Bot, Support)

Add a submit button ("Find Counters").

The form should store the input inside React states (e.g., using useState).

5. Handle the Form Submission
When the user submits:

You take the enemy champion and lane they selected.

You search your matchup data.

If you find the enemy champion in that lane:

You retrieve the recommended counter champions.

You also retrieve the item builds for those counter champions.

If you don’t find anything, show a "No data found" message.

6. Display the Results
Once you have:

A list of counterpicks

Item builds for each counterpick

Show them nicely:

List the counter champion names.

Under each champion, show:

Starting items

Core items

Situational items

Use basic UI — you can make it prettier later.

7. (Optional) Make it Smarter Later
Later, if you want, connect to the Riot Games API to pull live win rates and item builds automatically.

Or allow users to suggest new counterpicks that you approve and add to the database.